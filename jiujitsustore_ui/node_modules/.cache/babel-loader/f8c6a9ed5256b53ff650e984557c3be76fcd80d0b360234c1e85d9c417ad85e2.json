{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport Modal from \"@/components/Modal\";\nimport BaseButton from \"@/components/BaseButton\";\nimport BaseInput from \"@/components/BaseInput\";\nimport NotificationTemplate from \"@/pages/Notifications/NotificationTemplate\";\nimport { Card } from \"@/components/Card\";\nimport OrderItemService from \"../services/OrderItemService\";\nimport { ASelect, ASelectOption, AButton, Table, Pagination } from \"ant-design-vue\";\nimport OrderItemPictureView from './OrderItemPictureView.vue';\nconst orderItemsColumns = [\"orderItemId\", \"year\", \"date\", \"competitionId\", \"orderItemId\"];\nexport default {\n  props: {\n    orderItems: {\n      type: Array,\n      required: true\n    },\n    totalElements: {\n      type: Number,\n      required: true\n    },\n    page: {\n      type: Number,\n      required: true\n    }\n  },\n  components: {\n    Card,\n    Modal,\n    BaseButton,\n    BaseInput,\n    Table,\n    Pagination,\n    OrderItemPictureView\n  },\n  data() {\n    return {\n      modalOrderItems: false,\n      isTableView: true,\n      columns: [{\n        title: 'Order Item Id',\n        dataIndex: 'orderItemId',\n        visible: true,\n        scopedSlots: {\n          customRender: 'orderItemId'\n        },\n        sorter: true\n        //sorter: (a, b) => a.orderItemId - b.orderItemId,\n        //sorter: (a, b) => a.orderItemId.localeCompare(b.orderItemId),\n      }, {\n        title: 'Quantity',\n        dataIndex: 'quantity',\n        visible: true,\n        scopedSlots: {\n          customRender: 'quantity'\n        },\n        sorter: true\n        //sorter: (a, b) => a.quantity - b.quantity,\n        //sorter: (a, b) => a.quantity.localeCompare(b.quantity),\n      }, {\n        title: 'Price',\n        dataIndex: 'price',\n        visible: true,\n        scopedSlots: {\n          customRender: 'price'\n        },\n        sorter: true\n        //sorter: (a, b) => a.price - b.price,\n        //sorter: (a, b) => a.price.localeCompare(b.price),\n      }],\n      pagination: {\n        current: 1,\n        pageSize: 50,\n        total: 0,\n        showSizeChanger: true,\n        showQuickJumper: true,\n        showTotal: total => `Total ${total} orderItems`\n      },\n      orderItems: [],\n      orderItemToAdd: {},\n      orderItemsTable: {\n        columns: [...orderItemsColumns],\n        data: []\n      },\n      // New properties for sorting and searching\n      sortBy: 'orderItemId',\n      // Column to sort by\n      sortOrder: 'asc',\n      // Sort order (asc or desc)\n      searchQuery: '',\n      // Search query\n      searchLoading: false // Initialize searchLoading property\n    };\n  },\n  watch: {\n    searchQuery: {\n      handler: \"handleSearchQueryChanged\",\n      // Call the fetchData method when searchQuery changes\n      immediate: true // Trigger immediately when the component is mounted\n    }\n  },\n  methods: {\n    async renderOrderItemsTable() {\n      this.searchLoading = true; // Set searchLoading to true while fetching data\n      this.searchLoading = false;\n      this.pagination.total = this.totalElements;\n      this.pagination.current = this.page;\n      let orderItemsTableData = [];\n      for (let i = 0; i < this.orderItems.length; i++) {\n        orderItemsTableData.push({\n          id: i,\n          orderItemId: this.orderItems[i].orderItemId,\n          year: this.orderItems[i].year,\n          date: this.orderItems[i].date,\n          competitionId: this.orderItems[i].competitionId,\n          orderItemId: this.orderItems[i].orderItemId\n        });\n      }\n      this.searchLoading = false;\n    },\n    async onTableChange(pagination, filters, sorter) {\n      if (sorter && sorter.field && sorter.order) {\n        this.sortBy = sorter.field;\n        if (sorter.order == \"ascend\") {\n          this.sortOrder = \"asc\";\n        } else {\n          this.sortOrder = \"desc\";\n        }\n      }\n      if (pagination) {\n        this.pagination.current = pagination.current;\n        this.pagination.pageSize = pagination.pageSize;\n      }\n      this.$emit('get-all-order-items', this.sortBy, this.sortOrder, this.pagination.current - 1, this.pagination.pageSize);\n      this.handleTableChanged();\n    },\n    initializeColumns() {\n      this.columns = this.columns.filter(item => item.visible);\n    },\n    routingToProductDetail(id) {\n      this.$router.push({\n        name: 'ProductDetail',\n        params: {\n          productId: id.toString()\n        }\n      });\n    },\n    routingToCategoryDetail(id) {\n      this.$router.push({\n        name: 'CategoryDetail',\n        params: {\n          categoryId: id.toString()\n        }\n      });\n    },\n    routingToOrderDetail(id) {\n      this.$router.push({\n        name: 'OrderDetail',\n        params: {\n          orderId: id.toString()\n        }\n      });\n    },\n    routingToCustomerDetail(id) {\n      this.$router.push({\n        name: 'CustomerDetail',\n        params: {\n          customerId: id.toString()\n        }\n      });\n    },\n    routingToAddressDetail(id) {\n      this.$router.push({\n        name: 'AddressDetail',\n        params: {\n          addressId: id.toString()\n        }\n      });\n    },\n    routingToPaymentDetail(id) {\n      this.$router.push({\n        name: 'PaymentDetail',\n        params: {\n          paymentId: id.toString()\n        }\n      });\n    },\n    routingToOrderItemDetail(id) {\n      this.$router.push({\n        name: 'OrderItemDetail',\n        params: {\n          orderItemId: id.toString()\n        }\n      });\n    },\n    routingToSupplierDetail(id) {\n      this.$router.push({\n        name: 'SupplierDetail',\n        params: {\n          supplierId: id.toString()\n        }\n      });\n    },\n    routingToInventoryDetail(id) {\n      this.$router.push({\n        name: 'InventoryDetail',\n        params: {\n          inventoryId: id.toString()\n        }\n      });\n    },\n    routingToReviewDetail(id) {\n      this.$router.push({\n        name: 'ReviewDetail',\n        params: {\n          reviewId: id.toString()\n        }\n      });\n    },\n    routingToCouponDetail(id) {\n      this.$router.push({\n        name: 'CouponDetail',\n        params: {\n          couponId: id.toString()\n        }\n      });\n    },\n    routingToCartDetail(id) {\n      this.$router.push({\n        name: 'CartDetail',\n        params: {\n          cartId: id.toString()\n        }\n      });\n    },\n    routingToCartItemDetail(id) {\n      this.$router.push({\n        name: 'CartItemDetail',\n        params: {\n          cartItemId: id.toString()\n        }\n      });\n    },\n    routingToWishlistDetail(id) {\n      this.$router.push({\n        name: 'WishlistDetail',\n        params: {\n          wishlistId: id.toString()\n        }\n      });\n    },\n    routingToWishlistItemDetail(id) {\n      this.$router.push({\n        name: 'WishlistItemDetail',\n        params: {\n          wishlistItemId: id.toString()\n        }\n      });\n    },\n    routingToShipmentDetail(id) {\n      this.$router.push({\n        name: 'ShipmentDetail',\n        params: {\n          shipmentId: id.toString()\n        }\n      });\n    },\n    routingToDiscountDetail(id) {\n      this.$router.push({\n        name: 'DiscountDetail',\n        params: {\n          discountId: id.toString()\n        }\n      });\n    },\n    routingToStoreDetail(id) {\n      this.$router.push({\n        name: 'StoreDetail',\n        params: {\n          storeId: id.toString()\n        }\n      });\n    },\n    routingToStaffDetail(id) {\n      this.$router.push({\n        name: 'StaffDetail',\n        params: {\n          staffId: id.toString()\n        }\n      });\n    },\n    routingToPromotionDetail(id) {\n      this.$router.push({\n        name: 'PromotionDetail',\n        params: {\n          promotionId: id.toString()\n        }\n      });\n    },\n    handleSearchQueryChanged() {\n      console.log(\"handleSearchQueryChanged CALLED FROM @search\");\n      this.$root.$emit('searchQueryForOrderItemsChanged', this.searchQuery);\n      //this.renderOrderItemsTable();\n    },\n    onSearch(value) {\n      console.log(value);\n      this.searchQuery = value; // Update searchQuery when the user types\n    },\n    toggleView() {\n      this.isTableView = !this.isTableView;\n    },\n    async handleAddSubmitted() {\n      this.modalOrderItems = false;\n      const currentDate = new Date().getTime();\n      this.orderItemToAdd.created = currentDate;\n      const jsonData = JSON.stringify(this.orderItemToAdd);\n      console.log(jsonData);\n      const res = await OrderItemService.addOrderItem(jsonData);\n      if (res.status === 200) {\n        this.$notify({\n          component: NotificationTemplate,\n          icon: \"tim-icons icon-bell-55\",\n          type: \"success\",\n          timeout: 3000\n        });\n      }\n    },\n    handleTableChanged() {},\n    formatTime(dateString) {\n      if (dateString !== null) {\n        const date = new Date(dateString);\n        return `${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}-${date.getFullYear()} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')} EST`;\n      }\n      // Format the date here as needed, for example:\n    },\n    formatDate(dateString) {\n      if (dateString !== null) {\n        const date = new Date(dateString);\n        const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n        const day = String(date.getDate()).padStart(2, '0');\n        const monthAbbreviation = months[date.getMonth()];\n        const year = date.getFullYear();\n        return `${day} ${monthAbbreviation} ${year}`;\n      }\n      // Handle the case when dateString is null or invalid\n      return '';\n    }\n  },\n  mounted() {\n    this.initializeColumns();\n    this.renderOrderItemsTable();\n  }\n};","map":{"version":3,"names":["Modal","BaseButton","BaseInput","NotificationTemplate","Card","OrderItemService","ASelect","ASelectOption","AButton","Table","Pagination","OrderItemPictureView","orderItemsColumns","props","orderItems","type","Array","required","totalElements","Number","page","components","data","modalOrderItems","isTableView","columns","title","dataIndex","visible","scopedSlots","customRender","sorter","pagination","current","pageSize","total","showSizeChanger","showQuickJumper","showTotal","orderItemToAdd","orderItemsTable","sortBy","sortOrder","searchQuery","searchLoading","watch","handler","immediate","methods","renderOrderItemsTable","orderItemsTableData","i","length","push","id","orderItemId","year","date","competitionId","onTableChange","filters","field","order","$emit","handleTableChanged","initializeColumns","filter","item","routingToProductDetail","$router","name","params","productId","toString","routingToCategoryDetail","categoryId","routingToOrderDetail","orderId","routingToCustomerDetail","customerId","routingToAddressDetail","addressId","routingToPaymentDetail","paymentId","routingToOrderItemDetail","routingToSupplierDetail","supplierId","routingToInventoryDetail","inventoryId","routingToReviewDetail","reviewId","routingToCouponDetail","couponId","routingToCartDetail","cartId","routingToCartItemDetail","cartItemId","routingToWishlistDetail","wishlistId","routingToWishlistItemDetail","wishlistItemId","routingToShipmentDetail","shipmentId","routingToDiscountDetail","discountId","routingToStoreDetail","storeId","routingToStaffDetail","staffId","routingToPromotionDetail","promotionId","handleSearchQueryChanged","console","log","$root","onSearch","value","toggleView","handleAddSubmitted","currentDate","Date","getTime","created","jsonData","JSON","stringify","res","addOrderItem","status","$notify","component","icon","timeout","formatTime","dateString","getMonth","padStart","getDate","getFullYear","getHours","getMinutes","formatDate","months","day","String","monthAbbreviation","mounted"],"sources":["src/components/OrderItemTable.vue"],"sourcesContent":["\n<template>\n  <div class=\"content\">\n    <!-- search bar -->\n    <div class=\"row my-3 justify-content-end\">\n      <div class=\"col-8\"></div>\n       <div class=\"col-auto\">\n        <!-- Header Search Input -->\n        <a-input-search class=\"header-search\" :class=\"searchLoading ? 'loading' : ''\" placeholder=\"Search by BusinessUnit#, Location#, Operator#, City, State, FirstName, LastName…\"\n          @search=\"onSearch\" :loading='searchLoading' v-model=\"searchQuery\">\n          <svg slot=\"prefix\" width=\"16\" height=\"16\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path fill-rule=\"evenodd\" clip-rule=\"evenodd\"\n              d=\"M8 4C5.79086 4 4 5.79086 4 8C4 10.2091 5.79086 12 8 12C10.2091 12 12 10.2091 12 8C12 5.79086 10.2091 4 8 4ZM2 8C2 4.68629 4.68629 2 8 2C11.3137 2 14 4.68629 14 8C14 9.29583 13.5892 10.4957 12.8907 11.4765L17.7071 16.2929C18.0976 16.6834 18.0976 17.3166 17.7071 17.7071C17.3166 18.0976 16.6834 18.0976 16.2929 17.7071L11.4765 12.8907C10.4957 13.5892 9.29583 14 8 14C4.68629 14 2 11.3137 2 8Z\"\n              fill=\"#111827\" />\n          </svg>\n        </a-input-search>\n        <!-- / Header Search Input -->\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <card>\n          <template slot=\"header\">\n            <div class=\"row justify-content-between align-items-between mx-3\">\n\n              <h5 class=\"card-title\">Order Items</h5>\n              \n              <div>\n                  <base-button class=\"btn btn-primary\" @click=\"modalOrderItems = true\">Add</base-button>\n              </div>\n              \n              <modal :show.sync=\"modalOrderItems\">\n                <template slot=\"header\">\n                  <h5 class=\"modal-title\" id=\"exampleModalLabel\">Add OrderItem</h5>\n                </template>\n                <div>\n                  <form @submit.prevent>\n  <base-input label=\"Price\" type=\"text\" placeholder=\"Enter Price\" v-model=\"orderItemToAdd.price\"></base-input>\n  <base-input label=\"Quantity\" type=\"text\" placeholder=\"Enter Quantity\" v-model=\"orderItemToAdd.quantity\"></base-input>\n  <base-input label=\"OrderItemId\" type=\"text\" placeholder=\"Enter OrderItemId\" v-model=\"orderItemToAdd.orderItemId\"></base-input>\n                  </form>\n                </div>\n                <template slot=\"footer\">\n                  <base-button type=\"primary\" @click=\"handleAddSubmitted()\">Save</base-button>\n                </template>\n              </modal>\n            </div>\n          </template>\n\n\n          <!-- Conditionally render the view based on the 'isTableView' flag -->\n          <div v-if=\"isTableView\">\n            <!-- Render the existing Table View -->\n            <a-table :columns=\"columns\" :data-source=\"orderItems\" :row-key=\"record => record.OrderItemId\" :pagination=\"pagination\"\n              :loading=\"searchLoading\" @change=\"onTableChange\" :scroll=\"{ x: 'max-content' }\">\n\n\n\n             <template slot=\"lastModified\" slot-scope=\"dataIndex\">\n              \t{{ formatTime(dataIndex) }}\n              </template>\n              <template slot=\"createdOn\" slot-scope=\"dataIndex\">\n              \t{{ formatTime(dataIndex) }}\n              </template>\n              <template slot=\"blackOutStartDate\" slot-scope=\"dataIndex\">\n              \t{{ formatDate(dataIndex) }}\n              </template>\n            </a-table>\n          </div>\n          <div v-else>\n            <!-- Render the Picture View  -->\n            <OrderItemPictureView :orderItems=\"orderItems\" />\n          </div>\n\n        </card>\n      </div>\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport Modal from \"@/components/Modal\";\nimport BaseButton from \"@/components/BaseButton\";\nimport BaseInput from \"@/components/BaseInput\";\nimport NotificationTemplate from \"@/pages/Notifications/NotificationTemplate\";\nimport { Card } from \"@/components/Card\";\nimport OrderItemService from \"../services/OrderItemService\";\nimport { ASelect, ASelectOption, AButton, Table, Pagination } from \"ant-design-vue\";\nimport OrderItemPictureView from './OrderItemPictureView.vue';\n\n\nconst orderItemsColumns = [\n  \"orderItemId\",\n  \"year\",\n  \"date\",\n  \"competitionId\",\n  \"orderItemId\"\n]\n\nexport default {\n  props: {\n    orderItems: {\n      type: Array,\n      required: true,\n    },\n    totalElements: {\n      type: Number,\n      required: true,\n    },\n    page: {\n      type: Number,\n      required: true,\n    },\n  },\n  components: {\n    Card,\n    Modal,\n    BaseButton,\n    BaseInput,\n    Table,\n\n    Pagination,\n    OrderItemPictureView\n  },\n\n  data() {\n    return {\n      modalOrderItems: false,\n        isTableView: true,\n\n      columns: [\n        {\n          title: 'Order Item Id',\n\t\tdataIndex: 'orderItemId',\n          visible: true,\n          scopedSlots: { customRender: 'orderItemId' },\n          sorter: true\n          //sorter: (a, b) => a.orderItemId - b.orderItemId,\n          //sorter: (a, b) => a.orderItemId.localeCompare(b.orderItemId),\n        },\n        {\n          title: 'Quantity',\n\t\tdataIndex: 'quantity',\n          visible: true,\n          scopedSlots: { customRender: 'quantity' },\n          sorter: true\n          //sorter: (a, b) => a.quantity - b.quantity,\n          //sorter: (a, b) => a.quantity.localeCompare(b.quantity),\n        },\n        {\n          title: 'Price',\n\t\tdataIndex: 'price',\n          visible: true,\n          scopedSlots: { customRender: 'price' },\n          sorter: true\n          //sorter: (a, b) => a.price - b.price,\n          //sorter: (a, b) => a.price.localeCompare(b.price),\n        },\n      ],\n      pagination: {\n        current: 1,\n        pageSize: 50,\n        total: 0,\n        showSizeChanger: true,\n        showQuickJumper: true,\n        showTotal: (total) => `Total ${total} orderItems`,\n      },\n\n      orderItems: [],\n      orderItemToAdd: {},\n\n      orderItemsTable: {\n        columns: [...orderItemsColumns],\n        data: [],\n      },\n\n      // New properties for sorting and searching\n      sortBy: 'orderItemId',           // Column to sort by\n      sortOrder: 'asc',     // Sort order (asc or desc)\n      searchQuery: '',      // Search query\n      searchLoading: false, // Initialize searchLoading property\n\n\n    };\n  },\n  watch: {\n    searchQuery: {\n      handler: \"handleSearchQueryChanged\", // Call the fetchData method when searchQuery changes\n      immediate: true, // Trigger immediately when the component is mounted\n    },\n  },\n\n  methods: {\n\n    async renderOrderItemsTable() {\n      this.searchLoading = true; // Set searchLoading to true while fetching data\n      this.searchLoading = false;\n\n      this.pagination.total = this.totalElements;\n      this.pagination.current = this.page;\n\n      let orderItemsTableData = [];\n      for (let i = 0; i < this.orderItems.length; i++) {\n        orderItemsTableData.push({\n          id: i,\n          orderItemId: this.orderItems[i].orderItemId,\n          year: this.orderItems[i].year,\n          date: this.orderItems[i].date,\n          competitionId: this.orderItems[i].competitionId,\n          orderItemId: this.orderItems[i].orderItemId,\n        });\n\n      }\n      this.searchLoading = false;\n    },\n\n    async onTableChange(pagination, filters, sorter) {\n      if (sorter && sorter.field && sorter.order) {\n        this.sortBy = sorter.field;\n        if (sorter.order == \"ascend\") {\n            this.sortOrder = \"asc\";\n        } else {\n            this.sortOrder = \"desc\";\n        }\n      }\n      if (pagination) {\n        this.pagination.current = pagination.current;\n        this.pagination.pageSize = pagination.pageSize;\n      }\n\n\t  this.$emit('get-all-order-items',this.sortBy,this.sortOrder,this.pagination.current-1,this.pagination.pageSize);\n      this.handleTableChanged()\n    },\n\t\n\tinitializeColumns() {\n        this.columns = this.columns.filter(item => item.visible);\n    },\n\n    routingToProductDetail(id) {\n      this.$router.push({ name: 'ProductDetail', params: { productId: id.toString() }})\n    },\n    routingToCategoryDetail(id) {\n      this.$router.push({ name: 'CategoryDetail', params: { categoryId: id.toString() }})\n    },\n    routingToOrderDetail(id) {\n      this.$router.push({ name: 'OrderDetail', params: { orderId: id.toString() }})\n    },\n    routingToCustomerDetail(id) {\n      this.$router.push({ name: 'CustomerDetail', params: { customerId: id.toString() }})\n    },\n    routingToAddressDetail(id) {\n      this.$router.push({ name: 'AddressDetail', params: { addressId: id.toString() }})\n    },\n    routingToPaymentDetail(id) {\n      this.$router.push({ name: 'PaymentDetail', params: { paymentId: id.toString() }})\n    },\n    routingToOrderItemDetail(id) {\n      this.$router.push({ name: 'OrderItemDetail', params: { orderItemId: id.toString() }})\n    },\n    routingToSupplierDetail(id) {\n      this.$router.push({ name: 'SupplierDetail', params: { supplierId: id.toString() }})\n    },\n    routingToInventoryDetail(id) {\n      this.$router.push({ name: 'InventoryDetail', params: { inventoryId: id.toString() }})\n    },\n    routingToReviewDetail(id) {\n      this.$router.push({ name: 'ReviewDetail', params: { reviewId: id.toString() }})\n    },\n    routingToCouponDetail(id) {\n      this.$router.push({ name: 'CouponDetail', params: { couponId: id.toString() }})\n    },\n    routingToCartDetail(id) {\n      this.$router.push({ name: 'CartDetail', params: { cartId: id.toString() }})\n    },\n    routingToCartItemDetail(id) {\n      this.$router.push({ name: 'CartItemDetail', params: { cartItemId: id.toString() }})\n    },\n    routingToWishlistDetail(id) {\n      this.$router.push({ name: 'WishlistDetail', params: { wishlistId: id.toString() }})\n    },\n    routingToWishlistItemDetail(id) {\n      this.$router.push({ name: 'WishlistItemDetail', params: { wishlistItemId: id.toString() }})\n    },\n    routingToShipmentDetail(id) {\n      this.$router.push({ name: 'ShipmentDetail', params: { shipmentId: id.toString() }})\n    },\n    routingToDiscountDetail(id) {\n      this.$router.push({ name: 'DiscountDetail', params: { discountId: id.toString() }})\n    },\n    routingToStoreDetail(id) {\n      this.$router.push({ name: 'StoreDetail', params: { storeId: id.toString() }})\n    },\n    routingToStaffDetail(id) {\n      this.$router.push({ name: 'StaffDetail', params: { staffId: id.toString() }})\n    },\n    routingToPromotionDetail(id) {\n      this.$router.push({ name: 'PromotionDetail', params: { promotionId: id.toString() }})\n    },\n    \n    handleSearchQueryChanged() {\n    \tconsole.log(\"handleSearchQueryChanged CALLED FROM @search\")\n    \tthis.$root.$emit('searchQueryForOrderItemsChanged', this.searchQuery);\n\t\t//this.renderOrderItemsTable();\n    },\n\n    onSearch(value) {\n      console.log(value);\n      this.searchQuery = value; // Update searchQuery when the user types\n    },\n\n    toggleView() {\n      this.isTableView = !this.isTableView;\n    },\n\t\n\tasync handleAddSubmitted() {\n      this.modalOrderItems = false;\n\n      const currentDate = new Date().getTime();\n      this.orderItemToAdd.created = currentDate;\n\n      const jsonData = JSON.stringify(this.orderItemToAdd);\n      console.log(jsonData);\n      \n      const res = await OrderItemService.addOrderItem(jsonData);\n\n      if (res.status === 200) {\n        this.$notify({\n          component: NotificationTemplate,\n          icon: \"tim-icons icon-bell-55\",\n          type: \"success\",\n          timeout: 3000,\n        });\n      }\n\t},\n\t\n\thandleTableChanged() {\n\t},\n\t\n\tformatTime(dateString) {\n      if(dateString !== null){\n        const date = new Date(dateString);\n      return `${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}-${date.getFullYear()} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')} EST`;\n      }\n      // Format the date here as needed, for example:\n    },  \n    \n formatDate(dateString) {\n    if (dateString !== null) {\n\t    const date = new Date(dateString);\n\t    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\t    const day = String(date.getDate()).padStart(2, '0');\n\t    const monthAbbreviation = months[date.getMonth()];\n\t    const year = date.getFullYear();\n\t    return `${day} ${monthAbbreviation} ${year}`;\n  \t}\n  \t// Handle the case when dateString is null or invalid\n  \treturn '';\n    \n   },\n\n  },\n  mounted() {\n  \tthis.initializeColumns();\n    this.renderOrderItemsTable();\n  }\n};\n</script>\n\n<style>\n.modal-dialog {\n  margin-top: -300px;\n}\n.ant-table-row  {\n\ttext-align: center;\n}\n.ant-table-thead th span {\n\ttext-align: center;\n\twidth: 100%\n}\n.ant-table-fixed td span {\n    text-align: center;\n}\n.header-search {\n  width: 300px !important;\n  margin-left: auto !important;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}